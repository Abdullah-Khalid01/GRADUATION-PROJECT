
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000f4c  00000fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800064  00800064  00000fe4  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00002d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001595  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  0000452d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  00004bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00005790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b3  00000000  00000000  00006175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
  8a:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_SetPortDIR+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_SetPortDIR+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_SetPortDIR+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_SetPortDIR+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
  a4:	6a bb       	out	0x1a, r22	; 26
		break;
  a6:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
  a8:	67 bb       	out	0x17, r22	; 23
		break;
  aa:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
  ac:	64 bb       	out	0x14, r22	; 20
		break;
  ae:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
  b4:	44 23       	and	r20, r20
  b6:	09 f4       	brne	.+2      	; 0xba <DIO_SetPINDIR+0x6>
  b8:	41 c0       	rjmp	.+130    	; 0x13c <DIO_SetPINDIR+0x88>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_SetPINDIR+0xc>
  be:	7e c0       	rjmp	.+252    	; 0x1bc <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	a9 f0       	breq	.+42     	; 0xee <DIO_SetPINDIR+0x3a>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	30 f0       	brcs	.+12     	; 0xd4 <DIO_SetPINDIR+0x20>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	f1 f0       	breq	.+60     	; 0x108 <DIO_SetPINDIR+0x54>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_SetPINDIR+0x1e>
  d0:	75 c0       	rjmp	.+234    	; 0x1bc <DIO_SetPINDIR+0x108>
  d2:	27 c0       	rjmp	.+78     	; 0x122 <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ac 01       	movw	r20, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPINDIR+0x2e>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPINDIR+0x2a>
  e6:	ba 01       	movw	r22, r20
  e8:	62 2b       	or	r22, r18
  ea:	6a bb       	out	0x1a, r22	; 26
			break;
  ec:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPINDIR+0x48>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPINDIR+0x44>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
			break;
 106:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPINDIR+0x62>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPINDIR+0x5e>
 11a:	ba 01       	movw	r22, r20
 11c:	62 2b       	or	r22, r18
 11e:	64 bb       	out	0x14, r22	; 20
			break;
 120:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
 122:	21 b3       	in	r18, 0x11	; 17
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ac 01       	movw	r20, r24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPINDIR+0x7c>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPINDIR+0x78>
 134:	ba 01       	movw	r22, r20
 136:	62 2b       	or	r22, r18
 138:	61 bb       	out	0x11, r22	; 17
			break;
 13a:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	a9 f0       	breq	.+42     	; 0x16a <DIO_SetPINDIR+0xb6>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_SetPINDIR+0x9a>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	f9 f0       	breq	.+62     	; 0x186 <DIO_SetPINDIR+0xd2>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	c1 f5       	brne	.+112    	; 0x1bc <DIO_SetPINDIR+0x108>
 14c:	2a c0       	rjmp	.+84     	; 0x1a2 <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPINDIR+0xa8>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPINDIR+0xa4>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	6a bb       	out	0x1a, r22	; 26
			break;
 168:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPINDIR+0xc4>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPINDIR+0xc0>
 17c:	ba 01       	movw	r22, r20
 17e:	60 95       	com	r22
 180:	62 23       	and	r22, r18
 182:	67 bb       	out	0x17, r22	; 23
			break;
 184:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPINDIR+0xe0>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPINDIR+0xdc>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20
			break;
 1a0:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPINDIR+0xfc>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPINDIR+0xf8>
 1b4:	ba 01       	movw	r22, r20
 1b6:	60 95       	com	r22
 1b8:	62 23       	and	r22, r18
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	49 f0       	breq	.+18     	; 0x1d4 <DIO_WritePort+0x16>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_WritePort+0x12>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <DIO_WritePort+0x1a>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	41 f4       	brne	.+16     	; 0x1de <DIO_WritePort+0x20>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
 1d0:	6b bb       	out	0x1b, r22	; 27
	break;
 1d2:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
 1d4:	68 bb       	out	0x18, r22	; 24
	break;
 1d6:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
 1d8:	65 bb       	out	0x15, r22	; 21
	break;
 1da:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
 1dc:	62 bb       	out	0x12, r22	; 18
 1de:	08 95       	ret

000001e0 <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
 1e0:	44 23       	and	r20, r20
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_WritePIN+0x6>
 1e4:	41 c0       	rjmp	.+130    	; 0x268 <DIO_WritePIN+0x88>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_WritePIN+0xc>
 1ea:	7e c0       	rjmp	.+252    	; 0x2e8 <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a9 f0       	breq	.+42     	; 0x21a <DIO_WritePIN+0x3a>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	30 f0       	brcs	.+12     	; 0x200 <DIO_WritePIN+0x20>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	f1 f0       	breq	.+60     	; 0x234 <DIO_WritePIN+0x54>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_WritePIN+0x1e>
 1fc:	75 c0       	rjmp	.+234    	; 0x2e8 <DIO_WritePIN+0x108>
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_WritePIN+0x2e>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_WritePIN+0x2a>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
			break;
 218:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePIN+0x48>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePIN+0x44>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	68 bb       	out	0x18, r22	; 24
			break;
 232:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePIN+0x62>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePIN+0x5e>
 246:	ba 01       	movw	r22, r20
 248:	62 2b       	or	r22, r18
 24a:	65 bb       	out	0x15, r22	; 21
			break;
 24c:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
 24e:	22 b3       	in	r18, 0x12	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePIN+0x7c>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePIN+0x78>
 260:	ba 01       	movw	r22, r20
 262:	62 2b       	or	r22, r18
 264:	62 bb       	out	0x12, r22	; 18
			break;
 266:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	a9 f0       	breq	.+42     	; 0x296 <DIO_WritePIN+0xb6>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	28 f0       	brcs	.+10     	; 0x27a <DIO_WritePIN+0x9a>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	f9 f0       	breq	.+62     	; 0x2b2 <DIO_WritePIN+0xd2>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	c1 f5       	brne	.+112    	; 0x2e8 <DIO_WritePIN+0x108>
 278:	2a c0       	rjmp	.+84     	; 0x2ce <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritePIN+0xa8>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritePIN+0xa4>
 28c:	ba 01       	movw	r22, r20
 28e:	60 95       	com	r22
 290:	62 23       	and	r22, r18
 292:	6b bb       	out	0x1b, r22	; 27
		break;
 294:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
 296:	28 b3       	in	r18, 0x18	; 24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WritePIN+0xc4>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WritePIN+0xc0>
 2a8:	ba 01       	movw	r22, r20
 2aa:	60 95       	com	r22
 2ac:	62 23       	and	r22, r18
 2ae:	68 bb       	out	0x18, r22	; 24
		break;
 2b0:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WritePIN+0xe0>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WritePIN+0xdc>
 2c4:	ba 01       	movw	r22, r20
 2c6:	60 95       	com	r22
 2c8:	62 23       	and	r22, r18
 2ca:	65 bb       	out	0x15, r22	; 21
		break;
 2cc:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WritePIN+0xfc>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WritePIN+0xf8>
 2e0:	ba 01       	movw	r22, r20
 2e2:	60 95       	com	r22
 2e4:	62 23       	and	r22, r18
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret

000002ea <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	59 f0       	breq	.+22     	; 0x304 <DIO_ReadPort+0x1a>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_ReadPort+0x12>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	59 f0       	breq	.+22     	; 0x30c <DIO_ReadPort+0x22>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	81 f4       	brne	.+32     	; 0x31a <DIO_ReadPort+0x30>
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
 2fc:	89 b3       	in	r24, 0x19	; 25
 2fe:	fb 01       	movw	r30, r22
 300:	80 83       	st	Z, r24
		break;
 302:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
 304:	86 b3       	in	r24, 0x16	; 22
 306:	fb 01       	movw	r30, r22
 308:	80 83       	st	Z, r24
		break;
 30a:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
 30c:	83 b3       	in	r24, 0x13	; 19
 30e:	fb 01       	movw	r30, r22
 310:	80 83       	st	Z, r24
		break;
 312:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
 314:	80 b3       	in	r24, 0x10	; 16
 316:	fb 01       	movw	r30, r22
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	a1 f0       	breq	.+40     	; 0x348 <DIO_ReadPin+0x2c>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_ReadPin+0x12>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	e9 f0       	breq	.+58     	; 0x362 <DIO_ReadPin+0x46>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	a1 f5       	brne	.+104    	; 0x394 <DIO_ReadPin+0x78>
 32c:	27 c0       	rjmp	.+78     	; 0x37c <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
 32e:	89 b3       	in	r24, 0x19	; 25
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9c 01       	movw	r18, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPin+0x1e>
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPin+0x1a>
 33e:	b9 01       	movw	r22, r18
 340:	61 70       	andi	r22, 0x01	; 1
 342:	fa 01       	movw	r30, r20
 344:	60 83       	st	Z, r22
		break;
 346:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
 348:	86 b3       	in	r24, 0x16	; 22
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9c 01       	movw	r18, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_ReadPin+0x38>
 350:	35 95       	asr	r19
 352:	27 95       	ror	r18
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_ReadPin+0x34>
 358:	b9 01       	movw	r22, r18
 35a:	61 70       	andi	r22, 0x01	; 1
 35c:	fa 01       	movw	r30, r20
 35e:	60 83       	st	Z, r22
		break;
 360:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
 362:	83 b3       	in	r24, 0x13	; 19
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9c 01       	movw	r18, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_ReadPin+0x52>
 36a:	35 95       	asr	r19
 36c:	27 95       	ror	r18
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_ReadPin+0x4e>
 372:	b9 01       	movw	r22, r18
 374:	61 70       	andi	r22, 0x01	; 1
 376:	fa 01       	movw	r30, r20
 378:	60 83       	st	Z, r22
		break;
 37a:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
 37c:	80 b3       	in	r24, 0x10	; 16
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9c 01       	movw	r18, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_ReadPin+0x6c>
 384:	35 95       	asr	r19
 386:	27 95       	ror	r18
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_ReadPin+0x68>
 38c:	b9 01       	movw	r22, r18
 38e:	61 70       	andi	r22, 0x01	; 1
 390:	fa 01       	movw	r30, r20
 392:	60 83       	st	Z, r22
 394:	08 95       	ret

00000396 <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	a1 f0       	breq	.+40     	; 0x3c2 <DIO_togglePin+0x2c>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <DIO_togglePin+0x12>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	e9 f0       	breq	.+58     	; 0x3dc <DIO_togglePin+0x46>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	a1 f5       	brne	.+104    	; 0x40e <DIO_togglePin+0x78>
 3a6:	27 c0       	rjmp	.+78     	; 0x3f6 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_togglePin+0x20>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_togglePin+0x1c>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 27       	eor	r22, r18
 3be:	6b bb       	out	0x1b, r22	; 27
		break;
 3c0:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_togglePin+0x3a>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_togglePin+0x36>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 27       	eor	r22, r18
 3d8:	68 bb       	out	0x18, r22	; 24
		break;
 3da:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_togglePin+0x54>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_togglePin+0x50>
 3ee:	ba 01       	movw	r22, r20
 3f0:	62 27       	eor	r22, r18
 3f2:	65 bb       	out	0x15, r22	; 21
		break;
 3f4:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
 3f6:	22 b3       	in	r18, 0x12	; 18
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	ac 01       	movw	r20, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_togglePin+0x6e>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_togglePin+0x6a>
 408:	ba 01       	movw	r22, r20
 40a:	62 27       	eor	r22, r18
 40c:	62 bb       	out	0x12, r22	; 18
 40e:	08 95       	ret

00000410 <DIO_SetPullUp>:
	}
}

void DIO_SetPullUp(uint8 Port ,uint8 Pin )
{
	switch(Port)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	a1 f0       	breq	.+40     	; 0x43c <DIO_SetPullUp+0x2c>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	28 f0       	brcs	.+10     	; 0x422 <DIO_SetPullUp+0x12>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	e9 f0       	breq	.+58     	; 0x456 <DIO_SetPullUp+0x46>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	a1 f5       	brne	.+104    	; 0x488 <DIO_SetPullUp+0x78>
 420:	27 c0       	rjmp	.+78     	; 0x470 <DIO_SetPullUp+0x60>
	{

		case DIO_PORTA :

		Set_bit(PORTA,Pin);
 422:	2b b3       	in	r18, 0x1b	; 27
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_SetPullUp+0x20>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_SetPullUp+0x1c>
 434:	ba 01       	movw	r22, r20
 436:	62 2b       	or	r22, r18
 438:	6b bb       	out	0x1b, r22	; 27

		break;
 43a:	08 95       	ret

		case DIO_PORTB :

		Set_bit(PORTB,Pin);
 43c:	28 b3       	in	r18, 0x18	; 24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_SetPullUp+0x3a>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_SetPullUp+0x36>
 44e:	ba 01       	movw	r22, r20
 450:	62 2b       	or	r22, r18
 452:	68 bb       	out	0x18, r22	; 24

		break;
 454:	08 95       	ret

		case DIO_PORTC :

		Set_bit(PORTC,Pin);
 456:	25 b3       	in	r18, 0x15	; 21
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_SetPullUp+0x54>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_SetPullUp+0x50>
 468:	ba 01       	movw	r22, r20
 46a:	62 2b       	or	r22, r18
 46c:	65 bb       	out	0x15, r22	; 21

		break;
 46e:	08 95       	ret

		case DIO_PORTD :

		Set_bit(PORTD,Pin);
 470:	22 b3       	in	r18, 0x12	; 18
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_SetPullUp+0x6e>
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_SetPullUp+0x6a>
 482:	ba 01       	movw	r22, r20
 484:	62 2b       	or	r22, r18
 486:	62 bb       	out	0x12, r22	; 18
 488:	08 95       	ret

0000048a <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(0x02);	
	
	#endif
}
void LCD_WRITE_COMMAND(uint8 cmd)
{
 48a:	cf 93       	push	r28
 48c:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_LOW) ;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	62 e0       	ldi	r22, 0x02	; 2
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	63 e0       	ldi	r22, 0x03	; 3
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 4ac:	8b b3       	in	r24, 0x1b	; 27
 4ae:	9c 2f       	mov	r25, r28
 4b0:	90 7f       	andi	r25, 0xF0	; 240
 4b2:	8f 70       	andi	r24, 0x0F	; 15
 4b4:	89 2b       	or	r24, r25
 4b6:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	63 e0       	ldi	r22, 0x03	; 3
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	8f e9       	ldi	r24, 0x9F	; 159
 4c4:	9f e0       	ldi	r25, 0x0F	; 15
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_WRITE_COMMAND+0x3c>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_WRITE_COMMAND+0x42>
 4cc:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (cmd <<4) | (PORTA & 0x0F);
 4d8:	8b b3       	in	r24, 0x1b	; 27
 4da:	c2 95       	swap	r28
 4dc:	c0 7f       	andi	r28, 0xF0	; 240
 4de:	8f 70       	andi	r24, 0x0F	; 15
 4e0:	c8 2b       	or	r28, r24
 4e2:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	63 e0       	ldi	r22, 0x03	; 3
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 4ee:	8f e9       	ldi	r24, 0x9F	; 159
 4f0:	9f e0       	ldi	r25, 0x0F	; 15
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <LCD_WRITE_COMMAND+0x68>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <LCD_WRITE_COMMAND+0x6e>
 4f8:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 504:	8f e1       	ldi	r24, 0x1F	; 31
 506:	9e e4       	ldi	r25, 0x4E	; 78
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <LCD_WRITE_COMMAND+0x7e>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <LCD_WRITE_COMMAND+0x84>
 50e:	00 00       	nop
	
	_delay_ms(5);
	
	#endif 
	
}
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <LCD_INIT>:
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_OUTPUT) ;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_OUTPUT) ;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_OUTPUT) ;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	63 e0       	ldi	r22, 0x03	; 3
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	
	
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D4,DIO_PIN_OUTPUT);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	64 e0       	ldi	r22, 0x04	; 4
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D5,DIO_PIN_OUTPUT);
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	65 e0       	ldi	r22, 0x05	; 5
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D6,DIO_PIN_OUTPUT);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	66 e0       	ldi	r22, 0x06	; 6
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D7,DIO_PIN_OUTPUT);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	67 e0       	ldi	r22, 0x07	; 7
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	91 ee       	ldi	r25, 0xE1	; 225
 55e:	a4 e0       	ldi	r26, 0x04	; 4
 560:	81 50       	subi	r24, 0x01	; 1
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	a0 40       	sbci	r26, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <LCD_INIT+0x4c>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_INIT+0x56>
 56a:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WRITE_COMMAND(0x33);
 56c:	83 e3       	ldi	r24, 0x33	; 51
 56e:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x32);
 572:	82 e3       	ldi	r24, 0x32	; 50
 574:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
 578:	88 e2       	ldi	r24, 0x28	; 40
 57a:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0E);
 57e:	8e e0       	ldi	r24, 0x0E	; 14
 580:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);	
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
	
	#endif
}
 590:	08 95       	ret

00000592 <LCD_WRITE_CHARACHTER>:
	
	#endif 
	
}
void LCD_WRITE_CHARACHTER(uint8 chr)
{
 592:	cf 93       	push	r28
 594:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_HIGH) ;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	62 e0       	ldi	r22, 0x02	; 2
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	63 e0       	ldi	r22, 0x03	; 3
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (chr & 0xF0);
 5b4:	8c 2f       	mov	r24, r28
 5b6:	80 7f       	andi	r24, 0xF0	; 240
 5b8:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	63 e0       	ldi	r22, 0x03	; 3
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 5c4:	8f e9       	ldi	r24, 0x9F	; 159
 5c6:	9f e0       	ldi	r25, 0x0F	; 15
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_WRITE_CHARACHTER+0x36>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_WRITE_CHARACHTER+0x3c>
 5ce:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (chr <<4);
 5da:	c2 95       	swap	r28
 5dc:	c0 7f       	andi	r28, 0xF0	; 240
 5de:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	63 e0       	ldi	r22, 0x03	; 3
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 5ea:	8f e9       	ldi	r24, 0x9F	; 159
 5ec:	9f e0       	ldi	r25, 0x0F	; 15
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_WRITE_CHARACHTER+0x5c>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_WRITE_CHARACHTER+0x62>
 5f4:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	63 e0       	ldi	r22, 0x03	; 3
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 600:	8f e1       	ldi	r24, 0x1F	; 31
 602:	9e e4       	ldi	r25, 0x4E	; 78
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <LCD_WRITE_CHARACHTER+0x72>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_WRITE_CHARACHTER+0x78>
 60a:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
}
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <LCD_WriteString>:
void LCD_WriteString(uint8 *str)
{
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != '\0')
 618:	fc 01       	movw	r30, r24
 61a:	80 81       	ld	r24, Z
 61c:	88 23       	and	r24, r24
 61e:	51 f0       	breq	.+20     	; 0x634 <LCD_WriteString+0x24>
	
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
 620:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_WRITE_CHARACHTER(str[i]);
 622:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_WRITE_CHARACHTER>
		i++;
 626:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
	while(str[i] != '\0')
 628:	f8 01       	movw	r30, r16
 62a:	ec 0f       	add	r30, r28
 62c:	f1 1d       	adc	r31, r1
 62e:	80 81       	ld	r24, Z
 630:	88 23       	and	r24, r24
 632:	b9 f7       	brne	.-18     	; 0x622 <LCD_WriteString+0x12>
	{
		LCD_WRITE_CHARACHTER(str[i]);
		i++;
	}
}
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <LCD_CLEAR>:
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(0x01);
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
}
 642:	08 95       	ret

00000644 <LCD_MoveTo>:
void LCD_MoveTo(uint8 row , uint8 col)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	00 d0       	rcall	.+0      	; 0x64a <LCD_MoveTo+0x6>
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
          uint8 pos[2] = {0x80 , 0xC0};
 64e:	90 e8       	ldi	r25, 0x80	; 128
 650:	99 83       	std	Y+1, r25	; 0x01
 652:	90 ec       	ldi	r25, 0xC0	; 192
 654:	9a 83       	std	Y+2, r25	; 0x02

          LCD_WRITE_COMMAND(pos[row]+col);
 656:	fe 01       	movw	r30, r28
 658:	e8 0f       	add	r30, r24
 65a:	f1 1d       	adc	r31, r1
 65c:	81 81       	ldd	r24, Z+1	; 0x01
 65e:	86 0f       	add	r24, r22
 660:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_WRITE_COMMAND>
}
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 num)
{
 66e:	4f 92       	push	r4
 670:	5f 92       	push	r5
 672:	6f 92       	push	r6
 674:	7f 92       	push	r7
 676:	8f 92       	push	r8
 678:	9f 92       	push	r9
 67a:	af 92       	push	r10
 67c:	bf 92       	push	r11
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	6b 01       	movw	r12, r22
 68c:	7c 01       	movw	r14, r24
	sint32 temp =1;
	if(num < 0)
 68e:	99 23       	and	r25, r25
 690:	5c f4       	brge	.+22     	; 0x6a8 <LCD_WriteInteger+0x3a>
	{
		LCD_WRITE_CHARACHTER('-');
 692:	8d e2       	ldi	r24, 0x2D	; 45
 694:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_WRITE_CHARACHTER>
		num *= -1;
 698:	f0 94       	com	r15
 69a:	e0 94       	com	r14
 69c:	d0 94       	com	r13
 69e:	c0 94       	com	r12
 6a0:	c1 1c       	adc	r12, r1
 6a2:	d1 1c       	adc	r13, r1
 6a4:	e1 1c       	adc	r14, r1
 6a6:	f1 1c       	adc	r15, r1
	}
	
	while (num != 0)
 6a8:	c1 14       	cp	r12, r1
 6aa:	d1 04       	cpc	r13, r1
 6ac:	e1 04       	cpc	r14, r1
 6ae:	f1 04       	cpc	r15, r1
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <LCD_WriteInteger+0x46>
 6b2:	4f c0       	rjmp	.+158    	; 0x752 <LCD_WriteInteger+0xe4>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	a0 e0       	ldi	r26, 0x00	; 0
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
	{
		
		temp = (temp *10) +num %10;
 6bc:	0f 2e       	mov	r0, r31
 6be:	fa e0       	ldi	r31, 0x0A	; 10
 6c0:	8f 2e       	mov	r8, r31
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	9f 2e       	mov	r9, r31
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	af 2e       	mov	r10, r31
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	bf 2e       	mov	r11, r31
 6ce:	f0 2d       	mov	r31, r0
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	a5 01       	movw	r20, r10
 6d6:	94 01       	movw	r18, r8
 6d8:	0e 94 21 07 	call	0xe42	; 0xe42 <__mulsi3>
 6dc:	2b 01       	movw	r4, r22
 6de:	3c 01       	movw	r6, r24
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	0e 94 67 07 	call	0xece	; 0xece <__divmodsi4>
 6e8:	dc 01       	movw	r26, r24
 6ea:	cb 01       	movw	r24, r22
 6ec:	84 0d       	add	r24, r4
 6ee:	95 1d       	adc	r25, r5
 6f0:	a6 1d       	adc	r26, r6
 6f2:	b7 1d       	adc	r27, r7
		num=num/10;
 6f4:	c2 2e       	mov	r12, r18
 6f6:	d3 2e       	mov	r13, r19
 6f8:	e4 2e       	mov	r14, r20
 6fa:	f5 2e       	mov	r15, r21
	{
		LCD_WRITE_CHARACHTER('-');
		num *= -1;
	}
	
	while (num != 0)
 6fc:	c1 14       	cp	r12, r1
 6fe:	d1 04       	cpc	r13, r1
 700:	e1 04       	cpc	r14, r1
 702:	f1 04       	cpc	r15, r1
 704:	29 f7       	brne	.-54     	; 0x6d0 <LCD_WriteInteger+0x62>
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 706:	82 30       	cpi	r24, 0x02	; 2
 708:	91 05       	cpc	r25, r1
 70a:	a1 05       	cpc	r26, r1
 70c:	b1 05       	cpc	r27, r1
 70e:	0c f1       	brlt	.+66     	; 0x752 <LCD_WriteInteger+0xe4>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
 710:	0f 2e       	mov	r0, r31
 712:	fa e0       	ldi	r31, 0x0A	; 10
 714:	4f 2e       	mov	r4, r31
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	5f 2e       	mov	r5, r31
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	6f 2e       	mov	r6, r31
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	7f 2e       	mov	r7, r31
 722:	f0 2d       	mov	r31, r0
 724:	bc 01       	movw	r22, r24
 726:	cd 01       	movw	r24, r26
 728:	a3 01       	movw	r20, r6
 72a:	92 01       	movw	r18, r4
 72c:	0e 94 67 07 	call	0xece	; 0xece <__divmodsi4>
 730:	82 2e       	mov	r8, r18
 732:	c3 2e       	mov	r12, r19
 734:	c4 2f       	mov	r28, r20
 736:	d5 2f       	mov	r29, r21
 738:	86 2f       	mov	r24, r22
 73a:	80 5d       	subi	r24, 0xD0	; 208
 73c:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_WRITE_CHARACHTER>
		temp/=10;
 740:	88 2d       	mov	r24, r8
 742:	9c 2d       	mov	r25, r12
 744:	ac 2f       	mov	r26, r28
 746:	bd 2f       	mov	r27, r29
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 748:	82 30       	cpi	r24, 0x02	; 2
 74a:	91 05       	cpc	r25, r1
 74c:	a1 05       	cpc	r26, r1
 74e:	b1 05       	cpc	r27, r1
 750:	4c f7       	brge	.-46     	; 0x724 <LCD_WriteInteger+0xb6>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
		temp/=10;
	}
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	af 90       	pop	r10
 762:	9f 90       	pop	r9
 764:	8f 90       	pop	r8
 766:	7f 90       	pop	r7
 768:	6f 90       	pop	r6
 76a:	5f 90       	pop	r5
 76c:	4f 90       	pop	r4
 76e:	08 95       	ret

00000770 <LED0_INIT>:

#include "LED.h"

void LED0_INIT()
{
	DIO_SetPINDIR(DIO_PORTC, DIO_PIN2 , DIO_PIN_OUTPUT);
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	62 e0       	ldi	r22, 0x02	; 2
 774:	41 e0       	ldi	r20, 0x01	; 1
 776:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
}
 77a:	08 95       	ret

0000077c <LED0_ON>:

void LED0_ON()
{
	DIO_WritePIN(DIO_PORTC , DIO_PIN2 , DIO_PIN_HIGH);
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	62 e0       	ldi	r22, 0x02	; 2
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
}
 786:	08 95       	ret

00000788 <LED0_OFF>:

void LED0_OFF()
{
	DIO_WritePIN(DIO_PORTC , DIO_PIN2 , DIO_PIN_LOW);
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
}
 792:	08 95       	ret

00000794 <LED0_toggle>:

void LED0_toggle()
{
	DIO_togglePin(DIO_PORTC , DIO_PIN2);
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	62 e0       	ldi	r22, 0x02	; 2
 798:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_togglePin>
 79c:	08 95       	ret

0000079e <main>:
	LCD_CLEAR();
	LCD_WriteString("Your Choice is: ");
	*/
    while(1)
    {
		LCD_CLEAR();
 79e:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_CLEAR>
		test =UART_Receive_String();
 7a2:	0e 94 be 05 	call	0xb7c	; 0xb7c <UART_Receive_String>
		
		LCD_WriteString(test);
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 08 03 	call	0x610	; 0x610 <LCD_WriteString>
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	93 ed       	ldi	r25, 0xD3	; 211
 7b0:	a0 e3       	ldi	r26, 0x30	; 48
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	90 40       	sbci	r25, 0x00	; 0
 7b6:	a0 40       	sbci	r26, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x14>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x1e>
 7bc:	00 00       	nop
 7be:	ef cf       	rjmp	.-34     	; 0x79e <main>

000007c0 <Servo_Init>:
#include "Servo.h"


void Servo_Init(void)
{
	DIO_SetPINDIR(DIO_PORTD , DIO_PIN5 , DIO_PIN_OUTPUT);
 7c0:	83 e0       	ldi	r24, 0x03	; 3
 7c2:	65 e0       	ldi	r22, 0x05	; 5
 7c4:	41 e0       	ldi	r20, 0x01	; 1
 7c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	PWM1_INIT();
 7ca:	0e 94 7f 05 	call	0xafe	; 0xafe <PWM1_INIT>
	PWM1_Start();
 7ce:	0e 94 9e 05 	call	0xb3c	; 0xb3c <PWM1_Start>
}
 7d2:	08 95       	ret

000007d4 <Servo_SetDegree>:

void Servo_SetDegree(float degree)
{
		degree = degree * 0.3527777778 + 61.5;
 7d4:	2a e4       	ldi	r18, 0x4A	; 74
 7d6:	3f e9       	ldi	r19, 0x9F	; 159
 7d8:	44 eb       	ldi	r20, 0xB4	; 180
 7da:	5e e3       	ldi	r21, 0x3E	; 62
 7dc:	0e 94 be 06 	call	0xd7c	; 0xd7c <__mulsf3>
 7e0:	46 2f       	mov	r20, r22
 7e2:	57 2f       	mov	r21, r23
 7e4:	68 2f       	mov	r22, r24
 7e6:	79 2f       	mov	r23, r25
 7e8:	cb 01       	movw	r24, r22
 7ea:	ba 01       	movw	r22, r20
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	46 e7       	ldi	r20, 0x76	; 118
 7f2:	52 e4       	ldi	r21, 0x42	; 66
 7f4:	0e 94 dd 05 	call	0xbba	; 0xbba <__addsf3>
		OCR1A = degree;
 7f8:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixunssfsi>
 7fc:	dc 01       	movw	r26, r24
 7fe:	cb 01       	movw	r24, r22
 800:	9b bd       	out	0x2b, r25	; 43
 802:	8a bd       	out	0x2a, r24	; 42
	/* simulation
	degree = degree * 0.1866666667 + 31.6;
	OCR1A = degree;
	*/
 804:	08 95       	ret

00000806 <SPI_Master_Init>:
#include "SPI.h"


void SPI_Master_Init(void)
{
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN4 , DIO_PIN_OUTPUT);
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	64 e0       	ldi	r22, 0x04	; 4
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN5 , DIO_PIN_OUTPUT);
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	65 e0       	ldi	r22, 0x05	; 5
 814:	41 e0       	ldi	r20, 0x01	; 1
 816:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN6 , DIO_PIN_INPUT);
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	66 e0       	ldi	r22, 0x06	; 6
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN7 , DIO_PIN_OUTPUT);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	67 e0       	ldi	r22, 0x07	; 7
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	
	SPI->SPCR =0x53;
 82e:	83 e5       	ldi	r24, 0x53	; 83
 830:	8d b9       	out	0x0d, r24	; 13
}
 832:	08 95       	ret

00000834 <SPI_Slave_Init>:

void SPI_Slave_Init(void)
{
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN4 , DIO_PIN_INPUT);
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	64 e0       	ldi	r22, 0x04	; 4
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN5 , DIO_PIN_INPUT);
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	65 e0       	ldi	r22, 0x05	; 5
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN6 , DIO_PIN_OUTPUT);
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	66 e0       	ldi	r22, 0x06	; 6
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB , DIO_PIN7 , DIO_PIN_INPUT);
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	67 e0       	ldi	r22, 0x07	; 7
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	
		SPI->SPCR =0x40;
 85c:	80 e4       	ldi	r24, 0x40	; 64
 85e:	8d b9       	out	0x0d, r24	; 13
}
 860:	08 95       	ret

00000862 <SPI_Master_InitTrans>:

void SPI_Master_InitTrans(void)
{
	DIO_WritePIN(DIO_PORTB , DIO_PIN4 , DIO_PIN_LOW);
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	64 e0       	ldi	r22, 0x04	; 4
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
}
 86c:	08 95       	ret

0000086e <SPI_Master_TerTrans>:

void SPI_Master_TerTrans(void)
{
	DIO_WritePIN(DIO_PORTB , DIO_PIN4 , DIO_PIN_HIGH);
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	64 e0       	ldi	r22, 0x04	; 4
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
}
 878:	08 95       	ret

0000087a <SPI_Transiver>:

uint8 SPI_Transiver(uint8 transData)
{
	uint8 rec_data=0;
	
	SPI->SPDR=transData;
 87a:	8f b9       	out	0x0f, r24	; 15
	
	while(Get_bit(SPI->SPSR , 7)==0);
 87c:	77 9b       	sbis	0x0e, 7	; 14
 87e:	fe cf       	rjmp	.-4      	; 0x87c <SPI_Transiver+0x2>
	
	rec_data = SPI->SPDR;
 880:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data;
 882:	08 95       	ret

00000884 <Timer0_Init>:
{
	#if TIMER0_MODE==NORMAL
	
	/*Initialize Timer 0  as Normal mode */
	
	TCCR0 |= 0x00 ;
 884:	83 b7       	in	r24, 0x33	; 51
 886:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= 0x01;
 888:	89 b7       	in	r24, 0x39	; 57
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
 88e:	8f b7       	in	r24, 0x3f	; 63
 890:	80 68       	ori	r24, 0x80	; 128
 892:	8f bf       	out	0x3f, r24	; 63
	Set_bit(TCCR0,3);
	SREG |=0x80;
	Set_bit(TIMSK,1);
	
	#endif
}
 894:	08 95       	ret

00000896 <Timer0_Start>:
void Timer0_Start(void)
{
	
	/* start timer with prescaller   1024 */
	
	TCCR0 |= 0x05;
 896:	83 b7       	in	r24, 0x33	; 51
 898:	85 60       	ori	r24, 0x05	; 5
 89a:	83 bf       	out	0x33, r24	; 51
	
}
 89c:	08 95       	ret

0000089e <Timer0_Stop>:

void Timer0_Stop(void)
{
	
	Clr_bit(TCCR0,0);
 89e:	83 b7       	in	r24, 0x33	; 51
 8a0:	8e 7f       	andi	r24, 0xFE	; 254
 8a2:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,1);
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,2);
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	8b 7f       	andi	r24, 0xFB	; 251
 8ae:	83 bf       	out	0x33, r24	; 51
	
}
 8b0:	08 95       	ret

000008b2 <Timer0_SetDelay>:
	
	
	/* tick time in micro second */
	uint8 Tick_Time_us = (1024 / 16);
	
	uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time_us;
 8b2:	28 ee       	ldi	r18, 0xE8	; 232
 8b4:	33 e0       	ldi	r19, 0x03	; 3
 8b6:	40 e0       	ldi	r20, 0x00	; 0
 8b8:	50 e0       	ldi	r21, 0x00	; 0
 8ba:	0e 94 21 07 	call	0xe42	; 0xe42 <__mulsi3>
 8be:	dc 01       	movw	r26, r24
 8c0:	cb 01       	movw	r24, r22
 8c2:	68 94       	set
 8c4:	15 f8       	bld	r1, 5
 8c6:	b6 95       	lsr	r27
 8c8:	a7 95       	ror	r26
 8ca:	97 95       	ror	r25
 8cc:	87 95       	ror	r24
 8ce:	16 94       	lsr	r1
 8d0:	d1 f7       	brne	.-12     	; 0x8c6 <Timer0_SetDelay+0x14>
	
	#if TIMER0_MODE==NORMAL
	
	Number_OverFlows = Total_Ticks / 256 ;
 8d2:	49 2f       	mov	r20, r25
 8d4:	5a 2f       	mov	r21, r26
 8d6:	6b 2f       	mov	r22, r27
 8d8:	77 27       	eor	r23, r23
	
	CounterRegister_InitValue = 256 - (Total_Ticks % 256) ; //256 - ((  ((float) Total_Ticks / 256 ) - Number_OverFlows ) * 256 );
 8da:	81 95       	neg	r24
 8dc:	80 93 6d 00 	sts	0x006D, r24
	
	
	TCNT0 = CounterRegister_InitValue ;
 8e0:	82 bf       	out	0x32, r24	; 50
	
	Number_OverFlows ++;
 8e2:	db 01       	movw	r26, r22
 8e4:	ca 01       	movw	r24, r20
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	a1 1d       	adc	r26, r1
 8ea:	b1 1d       	adc	r27, r1
 8ec:	80 93 69 00 	sts	0x0069, r24
 8f0:	90 93 6a 00 	sts	0x006A, r25
 8f4:	a0 93 6b 00 	sts	0x006B, r26
 8f8:	b0 93 6c 00 	sts	0x006C, r27
		Num0_ComMatch=1;
	}
	
	
	#endif
}
 8fc:	08 95       	ret

000008fe <timer0_SetCallBack>:


void timer0_SetCallBack(void (*ptr)(void))
{
	timer0_ptr_function = ptr;
 8fe:	90 93 6f 00 	sts	0x006F, r25
 902:	80 93 6e 00 	sts	0x006E, r24
}
 906:	08 95       	ret

00000908 <__vector_11>:


#if TIMER0_MODE==NORMAL 
ISR(TIMER0_OVF_vect)
{
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	11 24       	eor	r1, r1
 912:	2f 93       	push	r18
 914:	3f 93       	push	r19
 916:	4f 93       	push	r20
 918:	5f 93       	push	r21
 91a:	6f 93       	push	r22
 91c:	7f 93       	push	r23
 91e:	8f 93       	push	r24
 920:	9f 93       	push	r25
 922:	af 93       	push	r26
 924:	bf 93       	push	r27
 926:	ef 93       	push	r30
 928:	ff 93       	push	r31
	
	static uint32 counter = 0;
	
	counter++;
 92a:	80 91 70 00 	lds	r24, 0x0070
 92e:	90 91 71 00 	lds	r25, 0x0071
 932:	a0 91 72 00 	lds	r26, 0x0072
 936:	b0 91 73 00 	lds	r27, 0x0073
 93a:	01 96       	adiw	r24, 0x01	; 1
 93c:	a1 1d       	adc	r26, r1
 93e:	b1 1d       	adc	r27, r1
 940:	80 93 70 00 	sts	0x0070, r24
 944:	90 93 71 00 	sts	0x0071, r25
 948:	a0 93 72 00 	sts	0x0072, r26
 94c:	b0 93 73 00 	sts	0x0073, r27
	
	if(counter == Number_OverFlows)
 950:	40 91 69 00 	lds	r20, 0x0069
 954:	50 91 6a 00 	lds	r21, 0x006A
 958:	60 91 6b 00 	lds	r22, 0x006B
 95c:	70 91 6c 00 	lds	r23, 0x006C
 960:	84 17       	cp	r24, r20
 962:	95 07       	cpc	r25, r21
 964:	a6 07       	cpc	r26, r22
 966:	b7 07       	cpc	r27, r23
 968:	81 f4       	brne	.+32     	; 0x98a <__vector_11+0x82>
	{
		TCNT0 = CounterRegister_InitValue;
 96a:	80 91 6d 00 	lds	r24, 0x006D
 96e:	82 bf       	out	0x32, r24	; 50
		
		counter = 0;
 970:	10 92 70 00 	sts	0x0070, r1
 974:	10 92 71 00 	sts	0x0071, r1
 978:	10 92 72 00 	sts	0x0072, r1
 97c:	10 92 73 00 	sts	0x0073, r1
		
		(*timer0_ptr_function)();  //why should we put the pointer between parentheses?
 980:	e0 91 6e 00 	lds	r30, 0x006E
 984:	f0 91 6f 00 	lds	r31, 0x006F
 988:	09 95       	icall
		
	}
	
	
}
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	bf 91       	pop	r27
 990:	af 91       	pop	r26
 992:	9f 91       	pop	r25
 994:	8f 91       	pop	r24
 996:	7f 91       	pop	r23
 998:	6f 91       	pop	r22
 99a:	5f 91       	pop	r21
 99c:	4f 91       	pop	r20
 99e:	3f 91       	pop	r19
 9a0:	2f 91       	pop	r18
 9a2:	0f 90       	pop	r0
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	0f 90       	pop	r0
 9a8:	1f 90       	pop	r1
 9aa:	18 95       	reti

000009ac <Timer1_Init>:



void Timer1_Init(void)
{
	TCCR1B|= 0x08;
 9ac:	8e b5       	in	r24, 0x2e	; 46
 9ae:	88 60       	ori	r24, 0x08	; 8
 9b0:	8e bd       	out	0x2e, r24	; 46
	TIMSK|= 0x10;
 9b2:	89 b7       	in	r24, 0x39	; 57
 9b4:	80 61       	ori	r24, 0x10	; 16
 9b6:	89 bf       	out	0x39, r24	; 57
	SREG|= 0x80;
 9b8:	8f b7       	in	r24, 0x3f	; 63
 9ba:	80 68       	ori	r24, 0x80	; 128
 9bc:	8f bf       	out	0x3f, r24	; 63
	
}
 9be:	08 95       	ret

000009c0 <Timer1_Start>:

void Timer1_Start(void)
{
	// Enable prescaler 1024
	TCCR1B|= 0x05;
 9c0:	8e b5       	in	r24, 0x2e	; 46
 9c2:	85 60       	ori	r24, 0x05	; 5
 9c4:	8e bd       	out	0x2e, r24	; 46
	
}
 9c6:	08 95       	ret

000009c8 <Timer1_Stop>:

void Timer1_Stop(void)
{
	Clr_bit(TCCR1B,0);
 9c8:	8e b5       	in	r24, 0x2e	; 46
 9ca:	8e 7f       	andi	r24, 0xFE	; 254
 9cc:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,1);
 9ce:	8e b5       	in	r24, 0x2e	; 46
 9d0:	8d 7f       	andi	r24, 0xFD	; 253
 9d2:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,2);
 9d4:	8e b5       	in	r24, 0x2e	; 46
 9d6:	8b 7f       	andi	r24, 0xFB	; 251
 9d8:	8e bd       	out	0x2e, r24	; 46
}
 9da:	08 95       	ret

000009dc <Timer1_SetDelay>:

void Timer1_SetDelay(uint32 Delay_Ms)
{
	if(Delay_Ms < 4000)
 9dc:	60 3a       	cpi	r22, 0xA0	; 160
 9de:	2f e0       	ldi	r18, 0x0F	; 15
 9e0:	72 07       	cpc	r23, r18
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	82 07       	cpc	r24, r18
 9e6:	20 e0       	ldi	r18, 0x00	; 0
 9e8:	92 07       	cpc	r25, r18
 9ea:	f8 f4       	brcc	.+62     	; 0xa2a <Timer1_SetDelay+0x4e>
	{
		
	uint8 tick_time=1024/16;
	uint32 Num_Ticks =(Delay_Ms *1000) / tick_time;
 9ec:	28 ee       	ldi	r18, 0xE8	; 232
 9ee:	33 e0       	ldi	r19, 0x03	; 3
 9f0:	40 e0       	ldi	r20, 0x00	; 0
 9f2:	50 e0       	ldi	r21, 0x00	; 0
 9f4:	0e 94 21 07 	call	0xe42	; 0xe42 <__mulsi3>
 9f8:	dc 01       	movw	r26, r24
 9fa:	cb 01       	movw	r24, r22
 9fc:	68 94       	set
 9fe:	15 f8       	bld	r1, 5
 a00:	b6 95       	lsr	r27
 a02:	a7 95       	ror	r26
 a04:	97 95       	ror	r25
 a06:	87 95       	ror	r24
 a08:	16 94       	lsr	r1
 a0a:	d1 f7       	brne	.-12     	; 0xa00 <Timer1_SetDelay+0x24>
	
	OCR1A = Num_Ticks -1;
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	9b bd       	out	0x2b, r25	; 43
 a10:	8a bd       	out	0x2a, r24	; 42
	
	Num_ComMatch =1;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	a0 e0       	ldi	r26, 0x00	; 0
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	80 93 65 00 	sts	0x0065, r24
 a1e:	90 93 66 00 	sts	0x0066, r25
 a22:	a0 93 67 00 	sts	0x0067, r26
 a26:	b0 93 68 00 	sts	0x0068, r27
 a2a:	08 95       	ret

00000a2c <timer1_SetCallBack>:
	}	
}

void timer1_SetCallBack(void (*ptr)(void))
{
	timer1_ptr_function = ptr;
 a2c:	90 93 75 00 	sts	0x0075, r25
 a30:	80 93 74 00 	sts	0x0074, r24
}
 a34:	08 95       	ret

00000a36 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	2f 93       	push	r18
 a42:	3f 93       	push	r19
 a44:	4f 93       	push	r20
 a46:	5f 93       	push	r21
 a48:	6f 93       	push	r22
 a4a:	7f 93       	push	r23
 a4c:	8f 93       	push	r24
 a4e:	9f 93       	push	r25
 a50:	af 93       	push	r26
 a52:	bf 93       	push	r27
 a54:	ef 93       	push	r30
 a56:	ff 93       	push	r31
	static uint32 counter =0;
	counter++;
 a58:	80 91 76 00 	lds	r24, 0x0076
 a5c:	90 91 77 00 	lds	r25, 0x0077
 a60:	a0 91 78 00 	lds	r26, 0x0078
 a64:	b0 91 79 00 	lds	r27, 0x0079
 a68:	01 96       	adiw	r24, 0x01	; 1
 a6a:	a1 1d       	adc	r26, r1
 a6c:	b1 1d       	adc	r27, r1
 a6e:	80 93 76 00 	sts	0x0076, r24
 a72:	90 93 77 00 	sts	0x0077, r25
 a76:	a0 93 78 00 	sts	0x0078, r26
 a7a:	b0 93 79 00 	sts	0x0079, r27
	if (counter == Num_ComMatch)
 a7e:	40 91 65 00 	lds	r20, 0x0065
 a82:	50 91 66 00 	lds	r21, 0x0066
 a86:	60 91 67 00 	lds	r22, 0x0067
 a8a:	70 91 68 00 	lds	r23, 0x0068
 a8e:	84 17       	cp	r24, r20
 a90:	95 07       	cpc	r25, r21
 a92:	a6 07       	cpc	r26, r22
 a94:	b7 07       	cpc	r27, r23
 a96:	69 f4       	brne	.+26     	; 0xab2 <__vector_7+0x7c>
	{
		counter =0;
 a98:	10 92 76 00 	sts	0x0076, r1
 a9c:	10 92 77 00 	sts	0x0077, r1
 aa0:	10 92 78 00 	sts	0x0078, r1
 aa4:	10 92 79 00 	sts	0x0079, r1
		(*timer1_ptr_function)();
 aa8:	e0 91 74 00 	lds	r30, 0x0074
 aac:	f0 91 75 00 	lds	r31, 0x0075
 ab0:	09 95       	icall
	}
	
}
 ab2:	ff 91       	pop	r31
 ab4:	ef 91       	pop	r30
 ab6:	bf 91       	pop	r27
 ab8:	af 91       	pop	r26
 aba:	9f 91       	pop	r25
 abc:	8f 91       	pop	r24
 abe:	7f 91       	pop	r23
 ac0:	6f 91       	pop	r22
 ac2:	5f 91       	pop	r21
 ac4:	4f 91       	pop	r20
 ac6:	3f 91       	pop	r19
 ac8:	2f 91       	pop	r18
 aca:	0f 90       	pop	r0
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	0f 90       	pop	r0
 ad0:	1f 90       	pop	r1
 ad2:	18 95       	reti

00000ad4 <PWM0_INIT>:


void PWM0_INIT(void)
{
	//setting pwm mode
	TCCR0 |= 0x48;
 ad4:	83 b7       	in	r24, 0x33	; 51
 ad6:	88 64       	ori	r24, 0x48	; 72
 ad8:	83 bf       	out	0x33, r24	; 51
	//setting non inverted mode
	TCCR0 |= 0x20;
 ada:	83 b7       	in	r24, 0x33	; 51
 adc:	80 62       	ori	r24, 0x20	; 32
 ade:	83 bf       	out	0x33, r24	; 51
}
 ae0:	08 95       	ret

00000ae2 <PWM0_Generate>:

void PWM0_Generate(uint16 Duty_Cycle)
{
	OCR0 =( (Duty_Cycle * 256)/100) - 1;
 ae2:	38 2f       	mov	r19, r24
 ae4:	20 e0       	ldi	r18, 0x00	; 0
 ae6:	c9 01       	movw	r24, r18
 ae8:	64 e6       	ldi	r22, 0x64	; 100
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	0e 94 40 07 	call	0xe80	; 0xe80 <__udivmodhi4>
 af0:	61 50       	subi	r22, 0x01	; 1
 af2:	6c bf       	out	0x3c, r22	; 60
}
 af4:	08 95       	ret

00000af6 <PWM0_Start>:

void PWM0_Start(void)
{
	TCCR0 |= 0x03;
 af6:	83 b7       	in	r24, 0x33	; 51
 af8:	83 60       	ori	r24, 0x03	; 3
 afa:	83 bf       	out	0x33, r24	; 51
}
 afc:	08 95       	ret

00000afe <PWM1_INIT>:

void PWM1_INIT(void)
{
	TCCR1A |= 0x82;
 afe:	8f b5       	in	r24, 0x2f	; 47
 b00:	82 68       	ori	r24, 0x82	; 130
 b02:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |= 0x1c;
 b04:	8e b5       	in	r24, 0x2e	; 46
 b06:	8c 61       	ori	r24, 0x1C	; 28
 b08:	8e bd       	out	0x2e, r24	; 46
	//652
	ICR1 = 1250;
 b0a:	82 ee       	ldi	r24, 0xE2	; 226
 b0c:	94 e0       	ldi	r25, 0x04	; 4
 b0e:	97 bd       	out	0x27, r25	; 39
 b10:	86 bd       	out	0x26, r24	; 38
}
 b12:	08 95       	ret

00000b14 <PWM1_Generate>:

void PWM1_Generate(uint8 Duty_Cycle)
{
	OCR1A = ( (Duty_Cycle * 1250 ) / 100 ) -1; // 1250 DETERMINED BY ME.
 b14:	48 2f       	mov	r20, r24
 b16:	50 e0       	ldi	r21, 0x00	; 0
 b18:	22 ee       	ldi	r18, 0xE2	; 226
 b1a:	34 e0       	ldi	r19, 0x04	; 4
 b1c:	42 9f       	mul	r20, r18
 b1e:	c0 01       	movw	r24, r0
 b20:	43 9f       	mul	r20, r19
 b22:	90 0d       	add	r25, r0
 b24:	52 9f       	mul	r21, r18
 b26:	90 0d       	add	r25, r0
 b28:	11 24       	eor	r1, r1
 b2a:	64 e6       	ldi	r22, 0x64	; 100
 b2c:	70 e0       	ldi	r23, 0x00	; 0
 b2e:	0e 94 54 07 	call	0xea8	; 0xea8 <__divmodhi4>
 b32:	61 50       	subi	r22, 0x01	; 1
 b34:	70 40       	sbci	r23, 0x00	; 0
 b36:	7b bd       	out	0x2b, r23	; 43
 b38:	6a bd       	out	0x2a, r22	; 42
}
 b3a:	08 95       	ret

00000b3c <PWM1_Start>:

void PWM1_Start()
{
	TCCR1B |=0x04;
 b3c:	8e b5       	in	r24, 0x2e	; 46
 b3e:	84 60       	ori	r24, 0x04	; 4
 b40:	8e bd       	out	0x2e, r24	; 46
}
 b42:	08 95       	ret

00000b44 <UART_INIT>:

void UART_INIT(void)
{
	uint32 BR_VALUE =0; 
	
	DIO_SetPINDIR(DIO_PORTD , DIO_PIN0 , DIO_PIN_INPUT);
 b44:	83 e0       	ldi	r24, 0x03	; 3
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	40 e0       	ldi	r20, 0x00	; 0
 b4a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);
 b4e:	83 e0       	ldi	r24, 0x03	; 3
 b50:	61 e0       	ldi	r22, 0x01	; 1
 b52:	41 e0       	ldi	r20, 0x01	; 1
 b54:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	
	UCSRB|=0x18;
 b58:	8a b1       	in	r24, 0x0a	; 10
 b5a:	88 61       	ori	r24, 0x18	; 24
 b5c:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=0x86;
 b5e:	80 b5       	in	r24, 0x20	; 32
 b60:	86 68       	ori	r24, 0x86	; 134
 b62:	80 bd       	out	0x20, r24	; 32
	
	BR_VALUE = ((160000) / (96*(16))) -1;
	
	UBRRL =BR_VALUE;
 b64:	87 e6       	ldi	r24, 0x67	; 103
 b66:	89 b9       	out	0x09, r24	; 9
}
 b68:	08 95       	ret

00000b6a <UART_Recieve_Byte>:

uint8 UART_Recieve_Byte(void)
{
	uint8 data=0;
	
	while(Get_bit(UCSRA,7) == 0 );
 b6a:	5f 9b       	sbis	0x0b, 7	; 11
 b6c:	fe cf       	rjmp	.-4      	; 0xb6a <UART_Recieve_Byte>
	
	data = UDR;
 b6e:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
 b70:	08 95       	ret

00000b72 <UART_SendByte>:

void UART_SendByte(uint8 data)

{
	while(Get_bit(UCSRA,5) == 0 );
 b72:	9b b1       	in	r25, 0x0b	; 11
 b74:	95 ff       	sbrs	r25, 5
 b76:	fd cf       	rjmp	.-6      	; 0xb72 <UART_SendByte>
	
	UDR =data;
 b78:	8c b9       	out	0x0c, r24	; 12
	
}
 b7a:	08 95       	ret

00000b7c <UART_Receive_String>:

uint8* UART_Receive_String(void)
{
 b7c:	1f 93       	push	r17
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
	uint8 i=0;
static uint8 data[4]={'n'};
	while (data[i]!='\0')
 b82:	80 91 60 00 	lds	r24, 0x0060
 b86:	88 23       	and	r24, r24
 b88:	89 f0       	breq	.+34     	; 0xbac <UART_Receive_String+0x30>
 b8a:	c0 e0       	ldi	r28, 0x00	; 0
 b8c:	d0 e0       	ldi	r29, 0x00	; 0
	
}

uint8* UART_Receive_String(void)
{
	uint8 i=0;
 b8e:	10 e0       	ldi	r17, 0x00	; 0
static uint8 data[4]={'n'};
	while (data[i]!='\0')
	{
		data[i]=UART_Recieve_Byte();
 b90:	0e 94 b5 05 	call	0xb6a	; 0xb6a <UART_Recieve_Byte>
 b94:	c0 5a       	subi	r28, 0xA0	; 160
 b96:	df 4f       	sbci	r29, 0xFF	; 255
 b98:	88 83       	st	Y, r24
		i++;
 b9a:	1f 5f       	subi	r17, 0xFF	; 255

uint8* UART_Receive_String(void)
{
	uint8 i=0;
static uint8 data[4]={'n'};
	while (data[i]!='\0')
 b9c:	c1 2f       	mov	r28, r17
 b9e:	d0 e0       	ldi	r29, 0x00	; 0
 ba0:	fe 01       	movw	r30, r28
 ba2:	e0 5a       	subi	r30, 0xA0	; 160
 ba4:	ff 4f       	sbci	r31, 0xFF	; 255
 ba6:	80 81       	ld	r24, Z
 ba8:	88 23       	and	r24, r24
 baa:	91 f7       	brne	.-28     	; 0xb90 <UART_Receive_String+0x14>
	{
		data[i]=UART_Recieve_Byte();
		i++;
	}
	return data;
 bac:	80 e6       	ldi	r24, 0x60	; 96
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	1f 91       	pop	r17
 bb6:	08 95       	ret

00000bb8 <__subsf3>:
 bb8:	50 58       	subi	r21, 0x80	; 128

00000bba <__addsf3>:
 bba:	bb 27       	eor	r27, r27
 bbc:	aa 27       	eor	r26, r26
 bbe:	0e d0       	rcall	.+28     	; 0xbdc <__addsf3x>
 bc0:	a3 c0       	rjmp	.+326    	; 0xd08 <__fp_round>
 bc2:	94 d0       	rcall	.+296    	; 0xcec <__fp_pscA>
 bc4:	30 f0       	brcs	.+12     	; 0xbd2 <__addsf3+0x18>
 bc6:	99 d0       	rcall	.+306    	; 0xcfa <__fp_pscB>
 bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__addsf3+0x18>
 bca:	31 f4       	brne	.+12     	; 0xbd8 <__addsf3+0x1e>
 bcc:	9f 3f       	cpi	r25, 0xFF	; 255
 bce:	11 f4       	brne	.+4      	; 0xbd4 <__addsf3+0x1a>
 bd0:	1e f4       	brtc	.+6      	; 0xbd8 <__addsf3+0x1e>
 bd2:	89 c0       	rjmp	.+274    	; 0xce6 <__fp_nan>
 bd4:	0e f4       	brtc	.+2      	; 0xbd8 <__addsf3+0x1e>
 bd6:	e0 95       	com	r30
 bd8:	e7 fb       	bst	r30, 7
 bda:	7f c0       	rjmp	.+254    	; 0xcda <__fp_inf>

00000bdc <__addsf3x>:
 bdc:	e9 2f       	mov	r30, r25
 bde:	a5 d0       	rcall	.+330    	; 0xd2a <__fp_split3>
 be0:	80 f3       	brcs	.-32     	; 0xbc2 <__addsf3+0x8>
 be2:	ba 17       	cp	r27, r26
 be4:	62 07       	cpc	r22, r18
 be6:	73 07       	cpc	r23, r19
 be8:	84 07       	cpc	r24, r20
 bea:	95 07       	cpc	r25, r21
 bec:	18 f0       	brcs	.+6      	; 0xbf4 <__addsf3x+0x18>
 bee:	71 f4       	brne	.+28     	; 0xc0c <__addsf3x+0x30>
 bf0:	9e f5       	brtc	.+102    	; 0xc58 <__addsf3x+0x7c>
 bf2:	bd c0       	rjmp	.+378    	; 0xd6e <__fp_zero>
 bf4:	0e f4       	brtc	.+2      	; 0xbf8 <__addsf3x+0x1c>
 bf6:	e0 95       	com	r30
 bf8:	0b 2e       	mov	r0, r27
 bfa:	ba 2f       	mov	r27, r26
 bfc:	a0 2d       	mov	r26, r0
 bfe:	0b 01       	movw	r0, r22
 c00:	b9 01       	movw	r22, r18
 c02:	90 01       	movw	r18, r0
 c04:	0c 01       	movw	r0, r24
 c06:	ca 01       	movw	r24, r20
 c08:	a0 01       	movw	r20, r0
 c0a:	11 24       	eor	r1, r1
 c0c:	ff 27       	eor	r31, r31
 c0e:	59 1b       	sub	r21, r25
 c10:	99 f0       	breq	.+38     	; 0xc38 <__addsf3x+0x5c>
 c12:	59 3f       	cpi	r21, 0xF9	; 249
 c14:	50 f4       	brcc	.+20     	; 0xc2a <__addsf3x+0x4e>
 c16:	50 3e       	cpi	r21, 0xE0	; 224
 c18:	68 f1       	brcs	.+90     	; 0xc74 <__addsf3x+0x98>
 c1a:	1a 16       	cp	r1, r26
 c1c:	f0 40       	sbci	r31, 0x00	; 0
 c1e:	a2 2f       	mov	r26, r18
 c20:	23 2f       	mov	r18, r19
 c22:	34 2f       	mov	r19, r20
 c24:	44 27       	eor	r20, r20
 c26:	58 5f       	subi	r21, 0xF8	; 248
 c28:	f3 cf       	rjmp	.-26     	; 0xc10 <__addsf3x+0x34>
 c2a:	46 95       	lsr	r20
 c2c:	37 95       	ror	r19
 c2e:	27 95       	ror	r18
 c30:	a7 95       	ror	r26
 c32:	f0 40       	sbci	r31, 0x00	; 0
 c34:	53 95       	inc	r21
 c36:	c9 f7       	brne	.-14     	; 0xc2a <__addsf3x+0x4e>
 c38:	7e f4       	brtc	.+30     	; 0xc58 <__addsf3x+0x7c>
 c3a:	1f 16       	cp	r1, r31
 c3c:	ba 0b       	sbc	r27, r26
 c3e:	62 0b       	sbc	r22, r18
 c40:	73 0b       	sbc	r23, r19
 c42:	84 0b       	sbc	r24, r20
 c44:	ba f0       	brmi	.+46     	; 0xc74 <__addsf3x+0x98>
 c46:	91 50       	subi	r25, 0x01	; 1
 c48:	a1 f0       	breq	.+40     	; 0xc72 <__addsf3x+0x96>
 c4a:	ff 0f       	add	r31, r31
 c4c:	bb 1f       	adc	r27, r27
 c4e:	66 1f       	adc	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	c2 f7       	brpl	.-16     	; 0xc46 <__addsf3x+0x6a>
 c56:	0e c0       	rjmp	.+28     	; 0xc74 <__addsf3x+0x98>
 c58:	ba 0f       	add	r27, r26
 c5a:	62 1f       	adc	r22, r18
 c5c:	73 1f       	adc	r23, r19
 c5e:	84 1f       	adc	r24, r20
 c60:	48 f4       	brcc	.+18     	; 0xc74 <__addsf3x+0x98>
 c62:	87 95       	ror	r24
 c64:	77 95       	ror	r23
 c66:	67 95       	ror	r22
 c68:	b7 95       	ror	r27
 c6a:	f7 95       	ror	r31
 c6c:	9e 3f       	cpi	r25, 0xFE	; 254
 c6e:	08 f0       	brcs	.+2      	; 0xc72 <__addsf3x+0x96>
 c70:	b3 cf       	rjmp	.-154    	; 0xbd8 <__addsf3+0x1e>
 c72:	93 95       	inc	r25
 c74:	88 0f       	add	r24, r24
 c76:	08 f0       	brcs	.+2      	; 0xc7a <__addsf3x+0x9e>
 c78:	99 27       	eor	r25, r25
 c7a:	ee 0f       	add	r30, r30
 c7c:	97 95       	ror	r25
 c7e:	87 95       	ror	r24
 c80:	08 95       	ret

00000c82 <__fixunssfsi>:
 c82:	5b d0       	rcall	.+182    	; 0xd3a <__fp_splitA>
 c84:	88 f0       	brcs	.+34     	; 0xca8 <__fixunssfsi+0x26>
 c86:	9f 57       	subi	r25, 0x7F	; 127
 c88:	90 f0       	brcs	.+36     	; 0xcae <__fixunssfsi+0x2c>
 c8a:	b9 2f       	mov	r27, r25
 c8c:	99 27       	eor	r25, r25
 c8e:	b7 51       	subi	r27, 0x17	; 23
 c90:	a0 f0       	brcs	.+40     	; 0xcba <__fixunssfsi+0x38>
 c92:	d1 f0       	breq	.+52     	; 0xcc8 <__fixunssfsi+0x46>
 c94:	66 0f       	add	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	1a f0       	brmi	.+6      	; 0xca4 <__fixunssfsi+0x22>
 c9e:	ba 95       	dec	r27
 ca0:	c9 f7       	brne	.-14     	; 0xc94 <__fixunssfsi+0x12>
 ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <__fixunssfsi+0x46>
 ca4:	b1 30       	cpi	r27, 0x01	; 1
 ca6:	81 f0       	breq	.+32     	; 0xcc8 <__fixunssfsi+0x46>
 ca8:	62 d0       	rcall	.+196    	; 0xd6e <__fp_zero>
 caa:	b1 e0       	ldi	r27, 0x01	; 1
 cac:	08 95       	ret
 cae:	5f c0       	rjmp	.+190    	; 0xd6e <__fp_zero>
 cb0:	67 2f       	mov	r22, r23
 cb2:	78 2f       	mov	r23, r24
 cb4:	88 27       	eor	r24, r24
 cb6:	b8 5f       	subi	r27, 0xF8	; 248
 cb8:	39 f0       	breq	.+14     	; 0xcc8 <__fixunssfsi+0x46>
 cba:	b9 3f       	cpi	r27, 0xF9	; 249
 cbc:	cc f3       	brlt	.-14     	; 0xcb0 <__fixunssfsi+0x2e>
 cbe:	86 95       	lsr	r24
 cc0:	77 95       	ror	r23
 cc2:	67 95       	ror	r22
 cc4:	b3 95       	inc	r27
 cc6:	d9 f7       	brne	.-10     	; 0xcbe <__fixunssfsi+0x3c>
 cc8:	3e f4       	brtc	.+14     	; 0xcd8 <__fixunssfsi+0x56>
 cca:	90 95       	com	r25
 ccc:	80 95       	com	r24
 cce:	70 95       	com	r23
 cd0:	61 95       	neg	r22
 cd2:	7f 4f       	sbci	r23, 0xFF	; 255
 cd4:	8f 4f       	sbci	r24, 0xFF	; 255
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	08 95       	ret

00000cda <__fp_inf>:
 cda:	97 f9       	bld	r25, 7
 cdc:	9f 67       	ori	r25, 0x7F	; 127
 cde:	80 e8       	ldi	r24, 0x80	; 128
 ce0:	70 e0       	ldi	r23, 0x00	; 0
 ce2:	60 e0       	ldi	r22, 0x00	; 0
 ce4:	08 95       	ret

00000ce6 <__fp_nan>:
 ce6:	9f ef       	ldi	r25, 0xFF	; 255
 ce8:	80 ec       	ldi	r24, 0xC0	; 192
 cea:	08 95       	ret

00000cec <__fp_pscA>:
 cec:	00 24       	eor	r0, r0
 cee:	0a 94       	dec	r0
 cf0:	16 16       	cp	r1, r22
 cf2:	17 06       	cpc	r1, r23
 cf4:	18 06       	cpc	r1, r24
 cf6:	09 06       	cpc	r0, r25
 cf8:	08 95       	ret

00000cfa <__fp_pscB>:
 cfa:	00 24       	eor	r0, r0
 cfc:	0a 94       	dec	r0
 cfe:	12 16       	cp	r1, r18
 d00:	13 06       	cpc	r1, r19
 d02:	14 06       	cpc	r1, r20
 d04:	05 06       	cpc	r0, r21
 d06:	08 95       	ret

00000d08 <__fp_round>:
 d08:	09 2e       	mov	r0, r25
 d0a:	03 94       	inc	r0
 d0c:	00 0c       	add	r0, r0
 d0e:	11 f4       	brne	.+4      	; 0xd14 <__fp_round+0xc>
 d10:	88 23       	and	r24, r24
 d12:	52 f0       	brmi	.+20     	; 0xd28 <__fp_round+0x20>
 d14:	bb 0f       	add	r27, r27
 d16:	40 f4       	brcc	.+16     	; 0xd28 <__fp_round+0x20>
 d18:	bf 2b       	or	r27, r31
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__fp_round+0x18>
 d1c:	60 ff       	sbrs	r22, 0
 d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__fp_round+0x20>
 d20:	6f 5f       	subi	r22, 0xFF	; 255
 d22:	7f 4f       	sbci	r23, 0xFF	; 255
 d24:	8f 4f       	sbci	r24, 0xFF	; 255
 d26:	9f 4f       	sbci	r25, 0xFF	; 255
 d28:	08 95       	ret

00000d2a <__fp_split3>:
 d2a:	57 fd       	sbrc	r21, 7
 d2c:	90 58       	subi	r25, 0x80	; 128
 d2e:	44 0f       	add	r20, r20
 d30:	55 1f       	adc	r21, r21
 d32:	59 f0       	breq	.+22     	; 0xd4a <__fp_splitA+0x10>
 d34:	5f 3f       	cpi	r21, 0xFF	; 255
 d36:	71 f0       	breq	.+28     	; 0xd54 <__fp_splitA+0x1a>
 d38:	47 95       	ror	r20

00000d3a <__fp_splitA>:
 d3a:	88 0f       	add	r24, r24
 d3c:	97 fb       	bst	r25, 7
 d3e:	99 1f       	adc	r25, r25
 d40:	61 f0       	breq	.+24     	; 0xd5a <__fp_splitA+0x20>
 d42:	9f 3f       	cpi	r25, 0xFF	; 255
 d44:	79 f0       	breq	.+30     	; 0xd64 <__fp_splitA+0x2a>
 d46:	87 95       	ror	r24
 d48:	08 95       	ret
 d4a:	12 16       	cp	r1, r18
 d4c:	13 06       	cpc	r1, r19
 d4e:	14 06       	cpc	r1, r20
 d50:	55 1f       	adc	r21, r21
 d52:	f2 cf       	rjmp	.-28     	; 0xd38 <__fp_split3+0xe>
 d54:	46 95       	lsr	r20
 d56:	f1 df       	rcall	.-30     	; 0xd3a <__fp_splitA>
 d58:	08 c0       	rjmp	.+16     	; 0xd6a <__fp_splitA+0x30>
 d5a:	16 16       	cp	r1, r22
 d5c:	17 06       	cpc	r1, r23
 d5e:	18 06       	cpc	r1, r24
 d60:	99 1f       	adc	r25, r25
 d62:	f1 cf       	rjmp	.-30     	; 0xd46 <__fp_splitA+0xc>
 d64:	86 95       	lsr	r24
 d66:	71 05       	cpc	r23, r1
 d68:	61 05       	cpc	r22, r1
 d6a:	08 94       	sec
 d6c:	08 95       	ret

00000d6e <__fp_zero>:
 d6e:	e8 94       	clt

00000d70 <__fp_szero>:
 d70:	bb 27       	eor	r27, r27
 d72:	66 27       	eor	r22, r22
 d74:	77 27       	eor	r23, r23
 d76:	cb 01       	movw	r24, r22
 d78:	97 f9       	bld	r25, 7
 d7a:	08 95       	ret

00000d7c <__mulsf3>:
 d7c:	0b d0       	rcall	.+22     	; 0xd94 <__mulsf3x>
 d7e:	c4 cf       	rjmp	.-120    	; 0xd08 <__fp_round>
 d80:	b5 df       	rcall	.-150    	; 0xcec <__fp_pscA>
 d82:	28 f0       	brcs	.+10     	; 0xd8e <__mulsf3+0x12>
 d84:	ba df       	rcall	.-140    	; 0xcfa <__fp_pscB>
 d86:	18 f0       	brcs	.+6      	; 0xd8e <__mulsf3+0x12>
 d88:	95 23       	and	r25, r21
 d8a:	09 f0       	breq	.+2      	; 0xd8e <__mulsf3+0x12>
 d8c:	a6 cf       	rjmp	.-180    	; 0xcda <__fp_inf>
 d8e:	ab cf       	rjmp	.-170    	; 0xce6 <__fp_nan>
 d90:	11 24       	eor	r1, r1
 d92:	ee cf       	rjmp	.-36     	; 0xd70 <__fp_szero>

00000d94 <__mulsf3x>:
 d94:	ca df       	rcall	.-108    	; 0xd2a <__fp_split3>
 d96:	a0 f3       	brcs	.-24     	; 0xd80 <__mulsf3+0x4>

00000d98 <__mulsf3_pse>:
 d98:	95 9f       	mul	r25, r21
 d9a:	d1 f3       	breq	.-12     	; 0xd90 <__mulsf3+0x14>
 d9c:	95 0f       	add	r25, r21
 d9e:	50 e0       	ldi	r21, 0x00	; 0
 da0:	55 1f       	adc	r21, r21
 da2:	62 9f       	mul	r22, r18
 da4:	f0 01       	movw	r30, r0
 da6:	72 9f       	mul	r23, r18
 da8:	bb 27       	eor	r27, r27
 daa:	f0 0d       	add	r31, r0
 dac:	b1 1d       	adc	r27, r1
 dae:	63 9f       	mul	r22, r19
 db0:	aa 27       	eor	r26, r26
 db2:	f0 0d       	add	r31, r0
 db4:	b1 1d       	adc	r27, r1
 db6:	aa 1f       	adc	r26, r26
 db8:	64 9f       	mul	r22, r20
 dba:	66 27       	eor	r22, r22
 dbc:	b0 0d       	add	r27, r0
 dbe:	a1 1d       	adc	r26, r1
 dc0:	66 1f       	adc	r22, r22
 dc2:	82 9f       	mul	r24, r18
 dc4:	22 27       	eor	r18, r18
 dc6:	b0 0d       	add	r27, r0
 dc8:	a1 1d       	adc	r26, r1
 dca:	62 1f       	adc	r22, r18
 dcc:	73 9f       	mul	r23, r19
 dce:	b0 0d       	add	r27, r0
 dd0:	a1 1d       	adc	r26, r1
 dd2:	62 1f       	adc	r22, r18
 dd4:	83 9f       	mul	r24, r19
 dd6:	a0 0d       	add	r26, r0
 dd8:	61 1d       	adc	r22, r1
 dda:	22 1f       	adc	r18, r18
 ddc:	74 9f       	mul	r23, r20
 dde:	33 27       	eor	r19, r19
 de0:	a0 0d       	add	r26, r0
 de2:	61 1d       	adc	r22, r1
 de4:	23 1f       	adc	r18, r19
 de6:	84 9f       	mul	r24, r20
 de8:	60 0d       	add	r22, r0
 dea:	21 1d       	adc	r18, r1
 dec:	82 2f       	mov	r24, r18
 dee:	76 2f       	mov	r23, r22
 df0:	6a 2f       	mov	r22, r26
 df2:	11 24       	eor	r1, r1
 df4:	9f 57       	subi	r25, 0x7F	; 127
 df6:	50 40       	sbci	r21, 0x00	; 0
 df8:	8a f0       	brmi	.+34     	; 0xe1c <__mulsf3_pse+0x84>
 dfa:	e1 f0       	breq	.+56     	; 0xe34 <__mulsf3_pse+0x9c>
 dfc:	88 23       	and	r24, r24
 dfe:	4a f0       	brmi	.+18     	; 0xe12 <__mulsf3_pse+0x7a>
 e00:	ee 0f       	add	r30, r30
 e02:	ff 1f       	adc	r31, r31
 e04:	bb 1f       	adc	r27, r27
 e06:	66 1f       	adc	r22, r22
 e08:	77 1f       	adc	r23, r23
 e0a:	88 1f       	adc	r24, r24
 e0c:	91 50       	subi	r25, 0x01	; 1
 e0e:	50 40       	sbci	r21, 0x00	; 0
 e10:	a9 f7       	brne	.-22     	; 0xdfc <__mulsf3_pse+0x64>
 e12:	9e 3f       	cpi	r25, 0xFE	; 254
 e14:	51 05       	cpc	r21, r1
 e16:	70 f0       	brcs	.+28     	; 0xe34 <__mulsf3_pse+0x9c>
 e18:	60 cf       	rjmp	.-320    	; 0xcda <__fp_inf>
 e1a:	aa cf       	rjmp	.-172    	; 0xd70 <__fp_szero>
 e1c:	5f 3f       	cpi	r21, 0xFF	; 255
 e1e:	ec f3       	brlt	.-6      	; 0xe1a <__mulsf3_pse+0x82>
 e20:	98 3e       	cpi	r25, 0xE8	; 232
 e22:	dc f3       	brlt	.-10     	; 0xe1a <__mulsf3_pse+0x82>
 e24:	86 95       	lsr	r24
 e26:	77 95       	ror	r23
 e28:	67 95       	ror	r22
 e2a:	b7 95       	ror	r27
 e2c:	f7 95       	ror	r31
 e2e:	e7 95       	ror	r30
 e30:	9f 5f       	subi	r25, 0xFF	; 255
 e32:	c1 f7       	brne	.-16     	; 0xe24 <__mulsf3_pse+0x8c>
 e34:	fe 2b       	or	r31, r30
 e36:	88 0f       	add	r24, r24
 e38:	91 1d       	adc	r25, r1
 e3a:	96 95       	lsr	r25
 e3c:	87 95       	ror	r24
 e3e:	97 f9       	bld	r25, 7
 e40:	08 95       	ret

00000e42 <__mulsi3>:
 e42:	62 9f       	mul	r22, r18
 e44:	d0 01       	movw	r26, r0
 e46:	73 9f       	mul	r23, r19
 e48:	f0 01       	movw	r30, r0
 e4a:	82 9f       	mul	r24, r18
 e4c:	e0 0d       	add	r30, r0
 e4e:	f1 1d       	adc	r31, r1
 e50:	64 9f       	mul	r22, r20
 e52:	e0 0d       	add	r30, r0
 e54:	f1 1d       	adc	r31, r1
 e56:	92 9f       	mul	r25, r18
 e58:	f0 0d       	add	r31, r0
 e5a:	83 9f       	mul	r24, r19
 e5c:	f0 0d       	add	r31, r0
 e5e:	74 9f       	mul	r23, r20
 e60:	f0 0d       	add	r31, r0
 e62:	65 9f       	mul	r22, r21
 e64:	f0 0d       	add	r31, r0
 e66:	99 27       	eor	r25, r25
 e68:	72 9f       	mul	r23, r18
 e6a:	b0 0d       	add	r27, r0
 e6c:	e1 1d       	adc	r30, r1
 e6e:	f9 1f       	adc	r31, r25
 e70:	63 9f       	mul	r22, r19
 e72:	b0 0d       	add	r27, r0
 e74:	e1 1d       	adc	r30, r1
 e76:	f9 1f       	adc	r31, r25
 e78:	bd 01       	movw	r22, r26
 e7a:	cf 01       	movw	r24, r30
 e7c:	11 24       	eor	r1, r1
 e7e:	08 95       	ret

00000e80 <__udivmodhi4>:
 e80:	aa 1b       	sub	r26, r26
 e82:	bb 1b       	sub	r27, r27
 e84:	51 e1       	ldi	r21, 0x11	; 17
 e86:	07 c0       	rjmp	.+14     	; 0xe96 <__udivmodhi4_ep>

00000e88 <__udivmodhi4_loop>:
 e88:	aa 1f       	adc	r26, r26
 e8a:	bb 1f       	adc	r27, r27
 e8c:	a6 17       	cp	r26, r22
 e8e:	b7 07       	cpc	r27, r23
 e90:	10 f0       	brcs	.+4      	; 0xe96 <__udivmodhi4_ep>
 e92:	a6 1b       	sub	r26, r22
 e94:	b7 0b       	sbc	r27, r23

00000e96 <__udivmodhi4_ep>:
 e96:	88 1f       	adc	r24, r24
 e98:	99 1f       	adc	r25, r25
 e9a:	5a 95       	dec	r21
 e9c:	a9 f7       	brne	.-22     	; 0xe88 <__udivmodhi4_loop>
 e9e:	80 95       	com	r24
 ea0:	90 95       	com	r25
 ea2:	bc 01       	movw	r22, r24
 ea4:	cd 01       	movw	r24, r26
 ea6:	08 95       	ret

00000ea8 <__divmodhi4>:
 ea8:	97 fb       	bst	r25, 7
 eaa:	09 2e       	mov	r0, r25
 eac:	07 26       	eor	r0, r23
 eae:	0a d0       	rcall	.+20     	; 0xec4 <__divmodhi4_neg1>
 eb0:	77 fd       	sbrc	r23, 7
 eb2:	04 d0       	rcall	.+8      	; 0xebc <__divmodhi4_neg2>
 eb4:	e5 df       	rcall	.-54     	; 0xe80 <__udivmodhi4>
 eb6:	06 d0       	rcall	.+12     	; 0xec4 <__divmodhi4_neg1>
 eb8:	00 20       	and	r0, r0
 eba:	1a f4       	brpl	.+6      	; 0xec2 <__divmodhi4_exit>

00000ebc <__divmodhi4_neg2>:
 ebc:	70 95       	com	r23
 ebe:	61 95       	neg	r22
 ec0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ec2 <__divmodhi4_exit>:
 ec2:	08 95       	ret

00000ec4 <__divmodhi4_neg1>:
 ec4:	f6 f7       	brtc	.-4      	; 0xec2 <__divmodhi4_exit>
 ec6:	90 95       	com	r25
 ec8:	81 95       	neg	r24
 eca:	9f 4f       	sbci	r25, 0xFF	; 255
 ecc:	08 95       	ret

00000ece <__divmodsi4>:
 ece:	97 fb       	bst	r25, 7
 ed0:	09 2e       	mov	r0, r25
 ed2:	05 26       	eor	r0, r21
 ed4:	0e d0       	rcall	.+28     	; 0xef2 <__divmodsi4_neg1>
 ed6:	57 fd       	sbrc	r21, 7
 ed8:	04 d0       	rcall	.+8      	; 0xee2 <__divmodsi4_neg2>
 eda:	14 d0       	rcall	.+40     	; 0xf04 <__udivmodsi4>
 edc:	0a d0       	rcall	.+20     	; 0xef2 <__divmodsi4_neg1>
 ede:	00 1c       	adc	r0, r0
 ee0:	38 f4       	brcc	.+14     	; 0xef0 <__divmodsi4_exit>

00000ee2 <__divmodsi4_neg2>:
 ee2:	50 95       	com	r21
 ee4:	40 95       	com	r20
 ee6:	30 95       	com	r19
 ee8:	21 95       	neg	r18
 eea:	3f 4f       	sbci	r19, 0xFF	; 255
 eec:	4f 4f       	sbci	r20, 0xFF	; 255
 eee:	5f 4f       	sbci	r21, 0xFF	; 255

00000ef0 <__divmodsi4_exit>:
 ef0:	08 95       	ret

00000ef2 <__divmodsi4_neg1>:
 ef2:	f6 f7       	brtc	.-4      	; 0xef0 <__divmodsi4_exit>
 ef4:	90 95       	com	r25
 ef6:	80 95       	com	r24
 ef8:	70 95       	com	r23
 efa:	61 95       	neg	r22
 efc:	7f 4f       	sbci	r23, 0xFF	; 255
 efe:	8f 4f       	sbci	r24, 0xFF	; 255
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	08 95       	ret

00000f04 <__udivmodsi4>:
 f04:	a1 e2       	ldi	r26, 0x21	; 33
 f06:	1a 2e       	mov	r1, r26
 f08:	aa 1b       	sub	r26, r26
 f0a:	bb 1b       	sub	r27, r27
 f0c:	fd 01       	movw	r30, r26
 f0e:	0d c0       	rjmp	.+26     	; 0xf2a <__udivmodsi4_ep>

00000f10 <__udivmodsi4_loop>:
 f10:	aa 1f       	adc	r26, r26
 f12:	bb 1f       	adc	r27, r27
 f14:	ee 1f       	adc	r30, r30
 f16:	ff 1f       	adc	r31, r31
 f18:	a2 17       	cp	r26, r18
 f1a:	b3 07       	cpc	r27, r19
 f1c:	e4 07       	cpc	r30, r20
 f1e:	f5 07       	cpc	r31, r21
 f20:	20 f0       	brcs	.+8      	; 0xf2a <__udivmodsi4_ep>
 f22:	a2 1b       	sub	r26, r18
 f24:	b3 0b       	sbc	r27, r19
 f26:	e4 0b       	sbc	r30, r20
 f28:	f5 0b       	sbc	r31, r21

00000f2a <__udivmodsi4_ep>:
 f2a:	66 1f       	adc	r22, r22
 f2c:	77 1f       	adc	r23, r23
 f2e:	88 1f       	adc	r24, r24
 f30:	99 1f       	adc	r25, r25
 f32:	1a 94       	dec	r1
 f34:	69 f7       	brne	.-38     	; 0xf10 <__udivmodsi4_loop>
 f36:	60 95       	com	r22
 f38:	70 95       	com	r23
 f3a:	80 95       	com	r24
 f3c:	90 95       	com	r25
 f3e:	9b 01       	movw	r18, r22
 f40:	ac 01       	movw	r20, r24
 f42:	bd 01       	movw	r22, r26
 f44:	cf 01       	movw	r24, r30
 f46:	08 95       	ret

00000f48 <_exit>:
 f48:	f8 94       	cli

00000f4a <__stop_program>:
 f4a:	ff cf       	rjmp	.-2      	; 0xf4a <__stop_program>
